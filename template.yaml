AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM project to combine small daily log files into larger daily log files, 
  to make it possible to store them in Glacier without extra overhead, thereby
  avoiding prohibitive costs. AWS Control Tower is required. 

  Apart from the standard Control Tower log buckets, this application can also 
  process any arbitrary log buckets, as long as the log files in them have 
  dates in their path/object name.

  It can also either process in place in each source bucket, or move the results 
  to a dedicated long-term storage bucket with sensible Glacier lifecycle settings.

  This is a serverless solution, meaning there are no instances or clusters to
  maintain. Also, all copying is done entirely within S3, without down- or uploading 
  anything, something which is of importance when the volume of log files is large.

Globals:
  Function:
    Runtime: python3.12
    MemorySize: 256
    Handler: app.lambda_handler
    Timeout: 900
    Architectures:
      - x86_64

Parameters:

  ControlTowerBucket:
    Type: String
    Description: The name of the Control Tower system log bucket
    Default: 'aws-controltower-logs-111122223333-xx-xxxxx-1'

  ControlTowerBucketAccessLogBucket:
    Type: String
    Description: 
      The name of the Control Tower system log bucket access log bucket.

      If you are running Control Tower v2.8 or v2.9, enter the name of your
      Control Tower S3 access log bucket - it is misconfigured by the Control Tower
      team and its contents useless. The application will empty it every hour.

      If you are running any other version of Control Tower, leave this parameter
      blank. Instead, list the name of your Control Tower S3 access log bucket
      in the OtherBuckets parameter which will set it up to be parsed correctly.
    Default: '' 

  OtherBuckets:
    Type: String
    Description: 
      The list of buckets other than the Control Tower system log bucket
    Default: "foo-bucket,bar-bucket,baz-bucket"

  FinalAggregationPrefix:
    Type: String
    Description: 
      The final prefix for aggregated files when working in-place. 
      The 'folder' of aggregated files. Ignored if a common destination bucket
      is used.      
    Default: 'AggregatedLogs'

  OrganizationId:
    Type: String
    Description: The ID of the AWS Organization
    Default: 'o-xxxxxxxxxx'

  UseCommonDestinationBucket:
    Type: String
    Description: 
      If Yes, collect all log files into a common bucket with proper lifecycle configuration.
      If No, the source bucket is also the destination bucket.
    Default: 'Yes'
    AllowedValues: ['Yes', 'No']

  ExpirationInDays:
    Type: Number
    Description: The number of days after which aggregated logs will expire.
    Default: 3650

  DaysUntilGlacierDeepArchive:
    Type: Number
    Description: The number of days after which logs will be archived to Glacier Deep Archive.
    Default: 90

  GlacierObjectSize:
    Type: Number
    Description: The minimum size of log files to transition to Glacier Deep Archive.
    Default: 204800

  AggregationRegions:
    Type: String
    Description: If given, a JSON list of regions to aggregate main log files for; main 
      log files from other regions (presumably blocked and inactive) will be deleted. If left blank, 
      all regions will be aggregated.
    Default: '[]'

  DashboardName:
    Type: String
    Description: The name of the dashboard. Set to CloudWatch-Default to make it the default dashboard.
    Default: "CloudWatch-Default"

  
Conditions:
  UseCommonDestinationBucket: !Equals
    - !Ref UseCommonDestinationBucket
    - 'Yes'


Resources:

  CommonDestinationBucket:
    Type: AWS::S3::Bucket
    Condition: UseCommonDestinationBucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub "all-aggregated-logs-${AWS::AccountId}-${AWS::Region}"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          -
            Id: ToGlacier
            Status: Enabled
            ObjectSizeGreaterThan: !Ref GlacierObjectSize
            Transitions:
              - TransitionInDays: !Ref DaysUntilGlacierDeepArchive
                StorageClass: DEEP_ARCHIVE
          - 
            Id: FinalExpiration
            Status: Enabled
            ExpirationInDays: !Ref ExpirationInDays
          -
            Id: AbortIncomplete
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1

  TmpLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      # Must NOT be versioned!
      BucketName: !Sub "tmp-logs-${AWS::AccountId}-${AWS::Region}"
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: ShortLifeRule
            Status: Enabled
            ExpirationInDays: 1
          -
            Id: AbortIncomplete
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1

  CombineLogFilesSM:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachines/combine_log_files.asl.yaml
      DefinitionSubstitutions:
        DynamicSetupFunctionArn: !GetAtt DynamicSetupFunction.Arn
        GetFilesFunctionArn: !GetAtt GetFilesFunction.Arn
        DetermineArchiveKeyFunctionArn: !GetAtt DetermineArchiveKeyFunction.Arn
        CombineLogFilesFunctionArn: !GetAtt CombineLogFilesFunction.Arn
        DeleteOriginalsFunctionArn: !GetAtt DeleteOriginalsFunction.Arn
        GetControlTowerAccountIDsFunctionArn: !GetAtt GetControlTowerAccountIDsFunction.Arn
        GetRegionsFunctionArn: !GetAtt GetRegionsFunction.Arn
        GetExactFilesFunctionArn: !GetAtt GetExactFilesFunction.Arn
        DetermineOperationTypeFunctionArn: !GetAtt DetermineOperationTypeFunction.Arn
        CopyLogFilesFunctionArn: !GetAtt CopyLogFilesFunction.Arn

        ControlTowerBucketName: !Ref ControlTowerBucket
        OtherBucketNames: !Ref OtherBuckets
      Events:
        Daily:
          Type: Schedule
          Properties:
            Description: Schedule to run the combine_log_files state machine every day at 1 am
            Enabled: true
            Schedule: "cron(0 1 * * ? *)"
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref DynamicSetupFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GetFilesFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref DetermineArchiveKeyFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CombineLogFilesFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref DeleteOriginalsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GetControlTowerAccountIDsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GetRegionsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GetExactFilesFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref DetermineOperationTypeFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CopyLogFilesFunction


  CombineLogFilesFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/combine_log_files/
      MemorySize: 2048    # For maximum I/O performance
      Policies:
        - Statement:
            - 
              Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:CompleteMultipartUpload
                - s3:CreateMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:GetObject
                - s3:GetObjectVersion
                - s3:HeadBucket
                - s3:HeadObject
                - s3:ListBucket
                - s3:ListBucketVersions
                - s3:ListObjectVersions
                - s3:PutObject
                - s3:UploadFileobj
                - s3:UploadPartCopy
              Resource: '*'
            -
              Sid: KMSKeysFromOtherAccounts
              Effect: Allow
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: '*'   # All of them, from all accounts
      Environment:
        Variables:
          TMP_LOGS_BUCKET_NAME: !Ref TmpLogsBucket
          DEST_LOGS_BUCKET_NAME: !If [UseCommonDestinationBucket, !Ref CommonDestinationBucket, '']
          AGGREGATION_REGIONS: !Ref AggregationRegions


  DynamicSetupFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/dynamic_setup/
      Policies:
        - Statement:
            - Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:ListAllMyBuckets
              Resource: '*'


  DetermineArchiveKeyFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/determine_archive_key/
      Policies:
        - Statement:
            - Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectVersion
                - s3:HeadBucket
                - s3:HeadObject
                - s3:ListBucket
              Resource: '*'
      Environment:
        Variables:
          TMP_LOGS_BUCKET_NAME: !Ref TmpLogsBucket
          DEST_LOGS_BUCKET_NAME: !If [UseCommonDestinationBucket, !Ref CommonDestinationBucket, '']
          FINAL_AGGREGATION_PREFIX: !Ref FinalAggregationPrefix


  GetFilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get_files/
      Policies:
        - Statement:
            - Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectVersion
                - s3:HeadBucket
                - s3:HeadObject
                - s3:ListBucket
                - s3:PutObject
              Resource: '*'
      Environment:
        Variables:
          TMP_LOGS_BUCKET_NAME: !Ref TmpLogsBucket


  GetExactFilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get_exact_files/
      Policies:
        - Statement:
            - Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectVersion
                - s3:HeadBucket
                - s3:HeadObject
                - s3:ListBucket
                - s3:PutObject
              Resource: '*'
      Environment:
        Variables:
          TMP_LOGS_BUCKET_NAME: !Ref TmpLogsBucket


  DeleteOriginalsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/delete_originals/
      Policies:
        - Statement:
            - Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:DeleteObject
                - s3:DeleteObjects
                - s3:DeleteObjectVersion
                - s3:GetObject
                - s3:GetObjectVersion
                - s3:HeadBucket
                - s3:HeadObject
                - s3:ListBucket
                - s3:ListBucketVersions
                - s3:ListObjectVersions
              Resource: '*'
      Environment:
        Variables:
          TMP_LOGS_BUCKET_NAME: !Ref TmpLogsBucket


  GetControlTowerAccountIDsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get_control_tower_account_ids/
      Policies:
        - Statement:
            - Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectVersion
                - s3:HeadBucket
                - s3:HeadObject
                - s3:ListBucket
              Resource: '*'
      Environment:
        Variables:
          ORG_ID: !Ref OrganizationId


  GetRegionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get_regions/
      Policies:
        - Statement:
            - Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectVersion
                - s3:HeadBucket
                - s3:HeadObject
                - s3:ListBucket
              Resource: '*'


  EmptyVersionedBucketFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/empty_versioned_bucket/
      Policies:
        - Statement:
            - Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:DeleteObject
                - s3:DeleteObjects
                - s3:DeleteObjectVersion
                - s3:GetObject
                - s3:GetObjectVersion
                - s3:HeadBucket
                - s3:HeadObject
                - s3:ListBucket
                - s3:ListBucketVersions
                - s3:ListObjectVersions
              Resource: '*'
      Events:
        EmptyS3AccessBucket:
          Type: Schedule
          Properties:
            Schedule: 'rate(1 hour)'
            Name: EmptyS3AccessBucket
            Description: Empty Control Tower misconfigured S3 access bucket
            Enabled: true
      Environment:
        Variables:
          BUCKET_NAME: !Ref ControlTowerBucketAccessLogBucket


  DetermineOperationTypeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/determine_operation_type/
      Policies:
        - Statement:
            - Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectVersion
                - s3:HeadBucket
                - s3:HeadObject
                - s3:ListBucket
              Resource: '*'
      Environment:
        Variables:
          TMP_LOGS_BUCKET_NAME: !Ref TmpLogsBucket
          MIN_SIZE: !Ref GlacierObjectSize


  CopyLogFilesFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/copy_log_files/
      Policies:
        - Statement:
            - 
              Sid: S3CopyPermissions
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:ListBucket
                - s3:PutObject
                - s3:CopyObject
              Resource: '*'
      Environment:
        Variables:
          TMP_LOGS_BUCKET_NAME: !Ref TmpLogsBucket
          DEST_LOGS_BUCKET_NAME: !If [UseCommonDestinationBucket, !Ref CommonDestinationBucket, '']


  # ---------------------------------------------------------------------------
  #
  # State machine for processing consecutive days of historical main logs.
  # Call this with the following arguments:
  #
  # {
  #   "start_date": "YYYY-MM-DD",
  #   "end_date": "YYYY-MM-DD",
  #   "bucket_name": "aws-controltower-logs-123456789012-xx-yyyy-1"
  # }
  #
  # ---------------------------------------------------------------------------

  ProcessHistoricalMainLogsSM:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachines/process_historical_main_logs.asl.yaml
      DefinitionSubstitutions:
        ComputeDateListFunctionArn: !GetAtt ComputeDateListFunction.Arn
        CombineLogFilesSMArn: !Ref CombineLogFilesSM

      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - events:PutTargets
                - events:PutRule
                - events:DescribeRule
              Resource:
                - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
            - Effect: Allow
              Action: states:StartExecution
              Resource:
                - !Ref CombineLogFilesSM
            - Effect: Allow
              Action:
                - states:DescribeExecution
                - states:StopExecution
              Resource: '*'
            - Effect: Allow
              Action:
                - logs:*
              Resource: '*'
              
        - LambdaInvokePolicy:
            FunctionName: !Ref ComputeDateListFunction

        - StepFunctionsExecutionPolicy:
            StateMachineName: !Ref CombineLogFilesSM


  ComputeDateListFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/compute_date_list/


  # ---------------------------------------------------------------------------
  #
  # Alarms
  #
  # ---------------------------------------------------------------------------

  AlarmCombineLogFilesStateMachine:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: INFRA-CombineLogFilesSM-Failure-HIGH
      AlarmDescription: The CombineLogFilesSM state machine failed.
      ActionsEnabled: true
      OKActions: []
      AlarmActions: []
      InsufficientDataActions: []
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Statistic: Sum
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref CombineLogFilesSM
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching


  AlarmProcessHistoricalMainLogsStateMachine:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: INFRA-ProcessHistoricalMainLogsSM-Failure-HIGH
      AlarmDescription: The ProcessHistoricalMainLogsSM state machine failed.
      ActionsEnabled: true
      OKActions: []
      AlarmActions: []
      InsufficientDataActions: []
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Statistic: Sum
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref ProcessHistoricalMainLogsSM
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching


  #-------------------------------------------------------------------------------
  #
  # CloudWatch dashboard with custom resource to process an arbitrary bucket list
  #
  #-------------------------------------------------------------------------------

  DashboardBuilderFunction:
    Type: AWS::Serverless::Function
    Condition: UseCommonDestinationBucket
    Properties:
      CodeUri: functions/dashboard-builder/
      Handler: app.lambda_handler
      Timeout: 30
      Policies:
        - Statement:
            - 
              Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:ListAllMyBuckets
              Resource: '*'
            - 
              Sid: CloudWatchPermissions
              Effect: Allow
              Action:
                - cloudwatch:PutDashboard
                - cloudwatch:DeleteDashboards
              Resource: '*'
      Environment:
        Variables:
          CONTROL_TOWER_BUCKET: !Ref ControlTowerBucket
          DASHBOARD_NAME: !Ref DashboardName
          BUCKET_PREFIXES: !Ref OtherBuckets
          REGION: !Sub "${AWS::Region}"
          COMMON_DESTINATION_BUCKET: !Sub "all-aggregated-logs-${AWS::AccountId}-${AWS::Region}"
          COMBINE_LOG_FILES_SM_ARN: !Ref CombineLogFilesSM
          BODY_VARIABLE: !Sub |
                {
                    "height": 9,
                    "width": 24,
                    "y": 13,
                    "x": 0,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            <FIRST_VARIABLE>
                            <REST_VARIABLE>
                        ],
                        "view": "pie",
                        "region": "${AWS::Region}",
                        "period": 86400,
                        "legend": {
                            "position": "right"
                        },
                        "labels": {
                            "visible": true
                        },
                        "stat": "Maximum",
                        "title": "Size of buckets being aggregated"
                    }
                }
          FIRST_VARIABLE: !Sub '[ "AWS/S3", "BucketSizeBytes", "BucketName", "<BUCKET_NAME>", "StorageType", "StandardStorage", { "region": "${AWS::Region}" } ]'
          REST_VARIABLE:  !Sub '[ "...", "<BUCKET_NAME>", ".", ".", { "region": "${AWS::Region}" } ]'


  DashboardBuilderCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Condition: UseCommonDestinationBucket
    Properties:
      ServiceToken: !GetAtt DashboardBuilderFunction.Arn
      FunctionName: !Ref DashboardBuilderFunction
      BucketListProperty: !Ref OtherBuckets
